Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    THEN
    OBJECT
    NEW
    MINUS
    DOT
    TO
    PLUS
    SEQUENCE_FILE
    END
    DIVIDE
    TIMES
    RDD

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> BLOCK_STMT
Rule 2     BLOCK_STMT -> LBRACE enter_scope DECL_INIT STMT_INIT RBRACE
Rule 3     STMT_INIT -> STMT_INIT STMT
Rule 4     STMT_INIT -> <empty>
Rule 5     STMT -> BLOCK_STMT
Rule 6     STMT -> FOR_STMT
Rule 7     STMT -> WHILE_STMT
Rule 8     STMT -> IF_STMT
Rule 9     STMT -> ELSE_STMT
Rule 10    STMT -> ELSE_IF_STMT
Rule 11    IF_STMT -> IF LOGIC_EXPR BLOCK_STMT
Rule 12    ELSE_STMT -> ELSE BLOCK_STMT
Rule 13    ELSE_IF_STMT -> ELSEIF LOGIC_EXPR BLOCK_STMT
Rule 14    FOR_STMT -> FOR ITERABLE BLOCK_STMT
Rule 15    WHILE_STMT -> WHILE LOGIC_EXPR BLOCK_STMT
Rule 16    enter_scope -> <empty>
Rule 17    ITERABLE -> ID IN CONTAINER
Rule 18    CONTAINER -> ID
Rule 19    DECL_INIT -> DECL_INIT DECL
Rule 20    DECL_INIT -> <empty>
Rule 21    DECL -> VAL_DECL
Rule 22    DECL -> VAR_DECL
Rule 23    VAL_DECL -> VAL ID EQUALS NUMBER
Rule 24    VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE
Rule 25    VAL_DECL -> VAL ID EQUALS RDD_INIT
Rule 26    VAR_DECL -> VAR ID EQUALS NUMBER
Rule 27    VAR_DECL -> VAR ID EQUALS USER_DEFINE_VALUE
Rule 28    VAR_DECL -> VAR ID EQUALS RDD_INIT
Rule 29    USER_DEFINE_VALUE -> USER_DEFINE STRING
Rule 30    RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN
Rule 31    LOGIC_EXPR -> ID
Rule 32    LOGIC_EXPR -> NUMBER
Rule 33    LOGIC_EXPR -> NOT LOGIC_EXPR
Rule 34    LOGIC_EXPR -> ID AND LOGIC_EXPR
Rule 35    LOGIC_EXPR -> ID OR LOGIC_EXPR
Rule 36    LOGIC_EXPR -> ID LARGER LOGIC_EXPR
Rule 37    LOGIC_EXPR -> ID EQUAL LOGIC_EXPR
Rule 38    LOGIC_EXPR -> ID SMALLER LOGIC_EXPR
Rule 39    LOGIC_EXPR -> NUMBER AND LOGIC_EXPR
Rule 40    LOGIC_EXPR -> NUMBER OR LOGIC_EXPR
Rule 41    LOGIC_EXPR -> NUMBER LARGER LOGIC_EXPR
Rule 42    LOGIC_EXPR -> NUMBER EQUAL LOGIC_EXPR
Rule 43    LOGIC_EXPR -> NUMBER SMALLER LOGIC_EXPR

Terminals, with rules where they appear

AND                  : 34 39
DIVIDE               : 
DOT                  : 
ELSE                 : 12
ELSEIF               : 13
END                  : 
EQUAL                : 37 42
EQUALS               : 23 24 25 26 27 28
FOR                  : 14
ID                   : 17 18 23 24 25 26 27 28 31 34 35 36 37 38
IF                   : 11
IN                   : 17
LARGER               : 36 41
LBRACE               : 2
LPAREN               : 30
MINUS                : 
NEW                  : 
NOT                  : 33
NUMBER               : 23 26 32 39 40 41 42 43
OBJECT               : 
OR                   : 35 40
PLUS                 : 
RBRACE               : 2
RDD                  : 
RPAREN               : 30
SEQUENCE_FILE        : 
SMALLER              : 38 43
STRING               : 29 30
TEXT_FILE            : 30
THEN                 : 
TIMES                : 
TO                   : 
USER_DEFINE          : 29
VAL                  : 23 24 25
VAR                  : 26 27 28
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

BLOCK_STMT           : 1 5 11 12 13 14 15
CONTAINER            : 17
DECL                 : 19
DECL_INIT            : 2 19
ELSE_IF_STMT         : 10
ELSE_STMT            : 9
FOR_STMT             : 6
IF_STMT              : 8
ITERABLE             : 14
LOGIC_EXPR           : 11 13 15 33 34 35 36 37 38 39 40 41 42 43
PROGRAM              : 0
RDD_INIT             : 25 28
STMT                 : 3
STMT_INIT            : 2 3
USER_DEFINE_VALUE    : 24 27
VAL_DECL             : 21
VAR_DECL             : 22
WHILE_STMT           : 7
enter_scope          : 2

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . BLOCK_STMT
    (2) BLOCK_STMT -> . LBRACE enter_scope DECL_INIT STMT_INIT RBRACE

    LBRACE          shift and go to state 1

    PROGRAM                        shift and go to state 3
    BLOCK_STMT                     shift and go to state 2

state 1

    (2) BLOCK_STMT -> LBRACE . enter_scope DECL_INIT STMT_INIT RBRACE
    (16) enter_scope -> .

    VAL             reduce using rule 16 (enter_scope -> .)
    VAR             reduce using rule 16 (enter_scope -> .)
    RBRACE          reduce using rule 16 (enter_scope -> .)
    LBRACE          reduce using rule 16 (enter_scope -> .)
    FOR             reduce using rule 16 (enter_scope -> .)
    WHILE           reduce using rule 16 (enter_scope -> .)
    IF              reduce using rule 16 (enter_scope -> .)
    ELSE            reduce using rule 16 (enter_scope -> .)
    ELSEIF          reduce using rule 16 (enter_scope -> .)

    enter_scope                    shift and go to state 4

state 2

    (1) PROGRAM -> BLOCK_STMT .

    $end            reduce using rule 1 (PROGRAM -> BLOCK_STMT .)


state 3

    (0) S' -> PROGRAM .



state 4

    (2) BLOCK_STMT -> LBRACE enter_scope . DECL_INIT STMT_INIT RBRACE
    (19) DECL_INIT -> . DECL_INIT DECL
    (20) DECL_INIT -> .

    VAL             reduce using rule 20 (DECL_INIT -> .)
    VAR             reduce using rule 20 (DECL_INIT -> .)
    RBRACE          reduce using rule 20 (DECL_INIT -> .)
    LBRACE          reduce using rule 20 (DECL_INIT -> .)
    FOR             reduce using rule 20 (DECL_INIT -> .)
    WHILE           reduce using rule 20 (DECL_INIT -> .)
    IF              reduce using rule 20 (DECL_INIT -> .)
    ELSE            reduce using rule 20 (DECL_INIT -> .)
    ELSEIF          reduce using rule 20 (DECL_INIT -> .)

    DECL_INIT                      shift and go to state 5

state 5

    (2) BLOCK_STMT -> LBRACE enter_scope DECL_INIT . STMT_INIT RBRACE
    (19) DECL_INIT -> DECL_INIT . DECL
    (3) STMT_INIT -> . STMT_INIT STMT
    (4) STMT_INIT -> .
    (21) DECL -> . VAL_DECL
    (22) DECL -> . VAR_DECL
    (23) VAL_DECL -> . VAL ID EQUALS NUMBER
    (24) VAL_DECL -> . VAL ID EQUALS USER_DEFINE_VALUE
    (25) VAL_DECL -> . VAL ID EQUALS RDD_INIT
    (26) VAR_DECL -> . VAR ID EQUALS NUMBER
    (27) VAR_DECL -> . VAR ID EQUALS USER_DEFINE_VALUE
    (28) VAR_DECL -> . VAR ID EQUALS RDD_INIT

    RBRACE          reduce using rule 4 (STMT_INIT -> .)
    LBRACE          reduce using rule 4 (STMT_INIT -> .)
    FOR             reduce using rule 4 (STMT_INIT -> .)
    WHILE           reduce using rule 4 (STMT_INIT -> .)
    IF              reduce using rule 4 (STMT_INIT -> .)
    ELSE            reduce using rule 4 (STMT_INIT -> .)
    ELSEIF          reduce using rule 4 (STMT_INIT -> .)
    VAL             shift and go to state 7
    VAR             shift and go to state 10

    DECL                           shift and go to state 6
    VAR_DECL                       shift and go to state 8
    STMT_INIT                      shift and go to state 9
    VAL_DECL                       shift and go to state 11

state 6

    (19) DECL_INIT -> DECL_INIT DECL .

    VAL             reduce using rule 19 (DECL_INIT -> DECL_INIT DECL .)
    VAR             reduce using rule 19 (DECL_INIT -> DECL_INIT DECL .)
    RBRACE          reduce using rule 19 (DECL_INIT -> DECL_INIT DECL .)
    LBRACE          reduce using rule 19 (DECL_INIT -> DECL_INIT DECL .)
    FOR             reduce using rule 19 (DECL_INIT -> DECL_INIT DECL .)
    WHILE           reduce using rule 19 (DECL_INIT -> DECL_INIT DECL .)
    IF              reduce using rule 19 (DECL_INIT -> DECL_INIT DECL .)
    ELSE            reduce using rule 19 (DECL_INIT -> DECL_INIT DECL .)
    ELSEIF          reduce using rule 19 (DECL_INIT -> DECL_INIT DECL .)


state 7

    (23) VAL_DECL -> VAL . ID EQUALS NUMBER
    (24) VAL_DECL -> VAL . ID EQUALS USER_DEFINE_VALUE
    (25) VAL_DECL -> VAL . ID EQUALS RDD_INIT

    ID              shift and go to state 12


state 8

    (22) DECL -> VAR_DECL .

    VAL             reduce using rule 22 (DECL -> VAR_DECL .)
    VAR             reduce using rule 22 (DECL -> VAR_DECL .)
    RBRACE          reduce using rule 22 (DECL -> VAR_DECL .)
    LBRACE          reduce using rule 22 (DECL -> VAR_DECL .)
    FOR             reduce using rule 22 (DECL -> VAR_DECL .)
    WHILE           reduce using rule 22 (DECL -> VAR_DECL .)
    IF              reduce using rule 22 (DECL -> VAR_DECL .)
    ELSE            reduce using rule 22 (DECL -> VAR_DECL .)
    ELSEIF          reduce using rule 22 (DECL -> VAR_DECL .)


state 9

    (2) BLOCK_STMT -> LBRACE enter_scope DECL_INIT STMT_INIT . RBRACE
    (3) STMT_INIT -> STMT_INIT . STMT
    (5) STMT -> . BLOCK_STMT
    (6) STMT -> . FOR_STMT
    (7) STMT -> . WHILE_STMT
    (8) STMT -> . IF_STMT
    (9) STMT -> . ELSE_STMT
    (10) STMT -> . ELSE_IF_STMT
    (2) BLOCK_STMT -> . LBRACE enter_scope DECL_INIT STMT_INIT RBRACE
    (14) FOR_STMT -> . FOR ITERABLE BLOCK_STMT
    (15) WHILE_STMT -> . WHILE LOGIC_EXPR BLOCK_STMT
    (11) IF_STMT -> . IF LOGIC_EXPR BLOCK_STMT
    (12) ELSE_STMT -> . ELSE BLOCK_STMT
    (13) ELSE_IF_STMT -> . ELSEIF LOGIC_EXPR BLOCK_STMT

    RBRACE          shift and go to state 13
    LBRACE          shift and go to state 1
    FOR             shift and go to state 14
    WHILE           shift and go to state 22
    IF              shift and go to state 15
    ELSE            shift and go to state 18
    ELSEIF          shift and go to state 21

    IF_STMT                        shift and go to state 25
    WHILE_STMT                     shift and go to state 16
    BLOCK_STMT                     shift and go to state 20
    FOR_STMT                       shift and go to state 19
    STMT                           shift and go to state 17
    ELSE_IF_STMT                   shift and go to state 23
    ELSE_STMT                      shift and go to state 24

state 10

    (26) VAR_DECL -> VAR . ID EQUALS NUMBER
    (27) VAR_DECL -> VAR . ID EQUALS USER_DEFINE_VALUE
    (28) VAR_DECL -> VAR . ID EQUALS RDD_INIT

    ID              shift and go to state 26


state 11

    (21) DECL -> VAL_DECL .

    VAL             reduce using rule 21 (DECL -> VAL_DECL .)
    VAR             reduce using rule 21 (DECL -> VAL_DECL .)
    RBRACE          reduce using rule 21 (DECL -> VAL_DECL .)
    LBRACE          reduce using rule 21 (DECL -> VAL_DECL .)
    FOR             reduce using rule 21 (DECL -> VAL_DECL .)
    WHILE           reduce using rule 21 (DECL -> VAL_DECL .)
    IF              reduce using rule 21 (DECL -> VAL_DECL .)
    ELSE            reduce using rule 21 (DECL -> VAL_DECL .)
    ELSEIF          reduce using rule 21 (DECL -> VAL_DECL .)


state 12

    (23) VAL_DECL -> VAL ID . EQUALS NUMBER
    (24) VAL_DECL -> VAL ID . EQUALS USER_DEFINE_VALUE
    (25) VAL_DECL -> VAL ID . EQUALS RDD_INIT

    EQUALS          shift and go to state 27


state 13

    (2) BLOCK_STMT -> LBRACE enter_scope DECL_INIT STMT_INIT RBRACE .

    RBRACE          reduce using rule 2 (BLOCK_STMT -> LBRACE enter_scope DECL_INIT STMT_INIT RBRACE .)
    LBRACE          reduce using rule 2 (BLOCK_STMT -> LBRACE enter_scope DECL_INIT STMT_INIT RBRACE .)
    FOR             reduce using rule 2 (BLOCK_STMT -> LBRACE enter_scope DECL_INIT STMT_INIT RBRACE .)
    WHILE           reduce using rule 2 (BLOCK_STMT -> LBRACE enter_scope DECL_INIT STMT_INIT RBRACE .)
    IF              reduce using rule 2 (BLOCK_STMT -> LBRACE enter_scope DECL_INIT STMT_INIT RBRACE .)
    ELSE            reduce using rule 2 (BLOCK_STMT -> LBRACE enter_scope DECL_INIT STMT_INIT RBRACE .)
    ELSEIF          reduce using rule 2 (BLOCK_STMT -> LBRACE enter_scope DECL_INIT STMT_INIT RBRACE .)
    $end            reduce using rule 2 (BLOCK_STMT -> LBRACE enter_scope DECL_INIT STMT_INIT RBRACE .)


state 14

    (14) FOR_STMT -> FOR . ITERABLE BLOCK_STMT
    (17) ITERABLE -> . ID IN CONTAINER

    ID              shift and go to state 28

    ITERABLE                       shift and go to state 29

state 15

    (11) IF_STMT -> IF . LOGIC_EXPR BLOCK_STMT
    (31) LOGIC_EXPR -> . ID
    (32) LOGIC_EXPR -> . NUMBER
    (33) LOGIC_EXPR -> . NOT LOGIC_EXPR
    (34) LOGIC_EXPR -> . ID AND LOGIC_EXPR
    (35) LOGIC_EXPR -> . ID OR LOGIC_EXPR
    (36) LOGIC_EXPR -> . ID LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> . ID EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> . ID SMALLER LOGIC_EXPR
    (39) LOGIC_EXPR -> . NUMBER AND LOGIC_EXPR
    (40) LOGIC_EXPR -> . NUMBER OR LOGIC_EXPR
    (41) LOGIC_EXPR -> . NUMBER LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> . NUMBER EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> . NUMBER SMALLER LOGIC_EXPR

    ID              shift and go to state 33
    NUMBER          shift and go to state 30
    NOT             shift and go to state 31

    LOGIC_EXPR                     shift and go to state 32

state 16

    (7) STMT -> WHILE_STMT .

    RBRACE          reduce using rule 7 (STMT -> WHILE_STMT .)
    LBRACE          reduce using rule 7 (STMT -> WHILE_STMT .)
    FOR             reduce using rule 7 (STMT -> WHILE_STMT .)
    WHILE           reduce using rule 7 (STMT -> WHILE_STMT .)
    IF              reduce using rule 7 (STMT -> WHILE_STMT .)
    ELSE            reduce using rule 7 (STMT -> WHILE_STMT .)
    ELSEIF          reduce using rule 7 (STMT -> WHILE_STMT .)


state 17

    (3) STMT_INIT -> STMT_INIT STMT .

    RBRACE          reduce using rule 3 (STMT_INIT -> STMT_INIT STMT .)
    LBRACE          reduce using rule 3 (STMT_INIT -> STMT_INIT STMT .)
    FOR             reduce using rule 3 (STMT_INIT -> STMT_INIT STMT .)
    WHILE           reduce using rule 3 (STMT_INIT -> STMT_INIT STMT .)
    IF              reduce using rule 3 (STMT_INIT -> STMT_INIT STMT .)
    ELSE            reduce using rule 3 (STMT_INIT -> STMT_INIT STMT .)
    ELSEIF          reduce using rule 3 (STMT_INIT -> STMT_INIT STMT .)


state 18

    (12) ELSE_STMT -> ELSE . BLOCK_STMT
    (2) BLOCK_STMT -> . LBRACE enter_scope DECL_INIT STMT_INIT RBRACE

    LBRACE          shift and go to state 1

    BLOCK_STMT                     shift and go to state 34

state 19

    (6) STMT -> FOR_STMT .

    RBRACE          reduce using rule 6 (STMT -> FOR_STMT .)
    LBRACE          reduce using rule 6 (STMT -> FOR_STMT .)
    FOR             reduce using rule 6 (STMT -> FOR_STMT .)
    WHILE           reduce using rule 6 (STMT -> FOR_STMT .)
    IF              reduce using rule 6 (STMT -> FOR_STMT .)
    ELSE            reduce using rule 6 (STMT -> FOR_STMT .)
    ELSEIF          reduce using rule 6 (STMT -> FOR_STMT .)


state 20

    (5) STMT -> BLOCK_STMT .

    RBRACE          reduce using rule 5 (STMT -> BLOCK_STMT .)
    LBRACE          reduce using rule 5 (STMT -> BLOCK_STMT .)
    FOR             reduce using rule 5 (STMT -> BLOCK_STMT .)
    WHILE           reduce using rule 5 (STMT -> BLOCK_STMT .)
    IF              reduce using rule 5 (STMT -> BLOCK_STMT .)
    ELSE            reduce using rule 5 (STMT -> BLOCK_STMT .)
    ELSEIF          reduce using rule 5 (STMT -> BLOCK_STMT .)


state 21

    (13) ELSE_IF_STMT -> ELSEIF . LOGIC_EXPR BLOCK_STMT
    (31) LOGIC_EXPR -> . ID
    (32) LOGIC_EXPR -> . NUMBER
    (33) LOGIC_EXPR -> . NOT LOGIC_EXPR
    (34) LOGIC_EXPR -> . ID AND LOGIC_EXPR
    (35) LOGIC_EXPR -> . ID OR LOGIC_EXPR
    (36) LOGIC_EXPR -> . ID LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> . ID EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> . ID SMALLER LOGIC_EXPR
    (39) LOGIC_EXPR -> . NUMBER AND LOGIC_EXPR
    (40) LOGIC_EXPR -> . NUMBER OR LOGIC_EXPR
    (41) LOGIC_EXPR -> . NUMBER LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> . NUMBER EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> . NUMBER SMALLER LOGIC_EXPR

    ID              shift and go to state 33
    NUMBER          shift and go to state 30
    NOT             shift and go to state 31

    LOGIC_EXPR                     shift and go to state 35

state 22

    (15) WHILE_STMT -> WHILE . LOGIC_EXPR BLOCK_STMT
    (31) LOGIC_EXPR -> . ID
    (32) LOGIC_EXPR -> . NUMBER
    (33) LOGIC_EXPR -> . NOT LOGIC_EXPR
    (34) LOGIC_EXPR -> . ID AND LOGIC_EXPR
    (35) LOGIC_EXPR -> . ID OR LOGIC_EXPR
    (36) LOGIC_EXPR -> . ID LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> . ID EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> . ID SMALLER LOGIC_EXPR
    (39) LOGIC_EXPR -> . NUMBER AND LOGIC_EXPR
    (40) LOGIC_EXPR -> . NUMBER OR LOGIC_EXPR
    (41) LOGIC_EXPR -> . NUMBER LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> . NUMBER EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> . NUMBER SMALLER LOGIC_EXPR

    ID              shift and go to state 33
    NUMBER          shift and go to state 30
    NOT             shift and go to state 31

    LOGIC_EXPR                     shift and go to state 36

state 23

    (10) STMT -> ELSE_IF_STMT .

    RBRACE          reduce using rule 10 (STMT -> ELSE_IF_STMT .)
    LBRACE          reduce using rule 10 (STMT -> ELSE_IF_STMT .)
    FOR             reduce using rule 10 (STMT -> ELSE_IF_STMT .)
    WHILE           reduce using rule 10 (STMT -> ELSE_IF_STMT .)
    IF              reduce using rule 10 (STMT -> ELSE_IF_STMT .)
    ELSE            reduce using rule 10 (STMT -> ELSE_IF_STMT .)
    ELSEIF          reduce using rule 10 (STMT -> ELSE_IF_STMT .)


state 24

    (9) STMT -> ELSE_STMT .

    RBRACE          reduce using rule 9 (STMT -> ELSE_STMT .)
    LBRACE          reduce using rule 9 (STMT -> ELSE_STMT .)
    FOR             reduce using rule 9 (STMT -> ELSE_STMT .)
    WHILE           reduce using rule 9 (STMT -> ELSE_STMT .)
    IF              reduce using rule 9 (STMT -> ELSE_STMT .)
    ELSE            reduce using rule 9 (STMT -> ELSE_STMT .)
    ELSEIF          reduce using rule 9 (STMT -> ELSE_STMT .)


state 25

    (8) STMT -> IF_STMT .

    RBRACE          reduce using rule 8 (STMT -> IF_STMT .)
    LBRACE          reduce using rule 8 (STMT -> IF_STMT .)
    FOR             reduce using rule 8 (STMT -> IF_STMT .)
    WHILE           reduce using rule 8 (STMT -> IF_STMT .)
    IF              reduce using rule 8 (STMT -> IF_STMT .)
    ELSE            reduce using rule 8 (STMT -> IF_STMT .)
    ELSEIF          reduce using rule 8 (STMT -> IF_STMT .)


state 26

    (26) VAR_DECL -> VAR ID . EQUALS NUMBER
    (27) VAR_DECL -> VAR ID . EQUALS USER_DEFINE_VALUE
    (28) VAR_DECL -> VAR ID . EQUALS RDD_INIT

    EQUALS          shift and go to state 37


state 27

    (23) VAL_DECL -> VAL ID EQUALS . NUMBER
    (24) VAL_DECL -> VAL ID EQUALS . USER_DEFINE_VALUE
    (25) VAL_DECL -> VAL ID EQUALS . RDD_INIT
    (29) USER_DEFINE_VALUE -> . USER_DEFINE STRING
    (30) RDD_INIT -> . TEXT_FILE LPAREN STRING RPAREN

    NUMBER          shift and go to state 40
    USER_DEFINE     shift and go to state 39
    TEXT_FILE       shift and go to state 38

    USER_DEFINE_VALUE              shift and go to state 41
    RDD_INIT                       shift and go to state 42

state 28

    (17) ITERABLE -> ID . IN CONTAINER

    IN              shift and go to state 43


state 29

    (14) FOR_STMT -> FOR ITERABLE . BLOCK_STMT
    (2) BLOCK_STMT -> . LBRACE enter_scope DECL_INIT STMT_INIT RBRACE

    LBRACE          shift and go to state 1

    BLOCK_STMT                     shift and go to state 44

state 30

    (32) LOGIC_EXPR -> NUMBER .
    (39) LOGIC_EXPR -> NUMBER . AND LOGIC_EXPR
    (40) LOGIC_EXPR -> NUMBER . OR LOGIC_EXPR
    (41) LOGIC_EXPR -> NUMBER . LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> NUMBER . EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> NUMBER . SMALLER LOGIC_EXPR

    LBRACE          reduce using rule 32 (LOGIC_EXPR -> NUMBER .)
    AND             shift and go to state 45
    OR              shift and go to state 49
    LARGER          shift and go to state 47
    EQUAL           shift and go to state 48
    SMALLER         shift and go to state 46


state 31

    (33) LOGIC_EXPR -> NOT . LOGIC_EXPR
    (31) LOGIC_EXPR -> . ID
    (32) LOGIC_EXPR -> . NUMBER
    (33) LOGIC_EXPR -> . NOT LOGIC_EXPR
    (34) LOGIC_EXPR -> . ID AND LOGIC_EXPR
    (35) LOGIC_EXPR -> . ID OR LOGIC_EXPR
    (36) LOGIC_EXPR -> . ID LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> . ID EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> . ID SMALLER LOGIC_EXPR
    (39) LOGIC_EXPR -> . NUMBER AND LOGIC_EXPR
    (40) LOGIC_EXPR -> . NUMBER OR LOGIC_EXPR
    (41) LOGIC_EXPR -> . NUMBER LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> . NUMBER EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> . NUMBER SMALLER LOGIC_EXPR

    ID              shift and go to state 33
    NUMBER          shift and go to state 30
    NOT             shift and go to state 31

    LOGIC_EXPR                     shift and go to state 50

state 32

    (11) IF_STMT -> IF LOGIC_EXPR . BLOCK_STMT
    (2) BLOCK_STMT -> . LBRACE enter_scope DECL_INIT STMT_INIT RBRACE

    LBRACE          shift and go to state 1

    BLOCK_STMT                     shift and go to state 51

state 33

    (31) LOGIC_EXPR -> ID .
    (34) LOGIC_EXPR -> ID . AND LOGIC_EXPR
    (35) LOGIC_EXPR -> ID . OR LOGIC_EXPR
    (36) LOGIC_EXPR -> ID . LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> ID . EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> ID . SMALLER LOGIC_EXPR

    LBRACE          reduce using rule 31 (LOGIC_EXPR -> ID .)
    AND             shift and go to state 52
    OR              shift and go to state 56
    LARGER          shift and go to state 54
    EQUAL           shift and go to state 55
    SMALLER         shift and go to state 53


state 34

    (12) ELSE_STMT -> ELSE BLOCK_STMT .

    RBRACE          reduce using rule 12 (ELSE_STMT -> ELSE BLOCK_STMT .)
    LBRACE          reduce using rule 12 (ELSE_STMT -> ELSE BLOCK_STMT .)
    FOR             reduce using rule 12 (ELSE_STMT -> ELSE BLOCK_STMT .)
    WHILE           reduce using rule 12 (ELSE_STMT -> ELSE BLOCK_STMT .)
    IF              reduce using rule 12 (ELSE_STMT -> ELSE BLOCK_STMT .)
    ELSE            reduce using rule 12 (ELSE_STMT -> ELSE BLOCK_STMT .)
    ELSEIF          reduce using rule 12 (ELSE_STMT -> ELSE BLOCK_STMT .)


state 35

    (13) ELSE_IF_STMT -> ELSEIF LOGIC_EXPR . BLOCK_STMT
    (2) BLOCK_STMT -> . LBRACE enter_scope DECL_INIT STMT_INIT RBRACE

    LBRACE          shift and go to state 1

    BLOCK_STMT                     shift and go to state 57

state 36

    (15) WHILE_STMT -> WHILE LOGIC_EXPR . BLOCK_STMT
    (2) BLOCK_STMT -> . LBRACE enter_scope DECL_INIT STMT_INIT RBRACE

    LBRACE          shift and go to state 1

    BLOCK_STMT                     shift and go to state 58

state 37

    (26) VAR_DECL -> VAR ID EQUALS . NUMBER
    (27) VAR_DECL -> VAR ID EQUALS . USER_DEFINE_VALUE
    (28) VAR_DECL -> VAR ID EQUALS . RDD_INIT
    (29) USER_DEFINE_VALUE -> . USER_DEFINE STRING
    (30) RDD_INIT -> . TEXT_FILE LPAREN STRING RPAREN

    NUMBER          shift and go to state 59
    USER_DEFINE     shift and go to state 39
    TEXT_FILE       shift and go to state 38

    USER_DEFINE_VALUE              shift and go to state 60
    RDD_INIT                       shift and go to state 61

state 38

    (30) RDD_INIT -> TEXT_FILE . LPAREN STRING RPAREN

    LPAREN          shift and go to state 62


state 39

    (29) USER_DEFINE_VALUE -> USER_DEFINE . STRING

    STRING          shift and go to state 63


state 40

    (23) VAL_DECL -> VAL ID EQUALS NUMBER .

    VAL             reduce using rule 23 (VAL_DECL -> VAL ID EQUALS NUMBER .)
    VAR             reduce using rule 23 (VAL_DECL -> VAL ID EQUALS NUMBER .)
    RBRACE          reduce using rule 23 (VAL_DECL -> VAL ID EQUALS NUMBER .)
    LBRACE          reduce using rule 23 (VAL_DECL -> VAL ID EQUALS NUMBER .)
    FOR             reduce using rule 23 (VAL_DECL -> VAL ID EQUALS NUMBER .)
    WHILE           reduce using rule 23 (VAL_DECL -> VAL ID EQUALS NUMBER .)
    IF              reduce using rule 23 (VAL_DECL -> VAL ID EQUALS NUMBER .)
    ELSE            reduce using rule 23 (VAL_DECL -> VAL ID EQUALS NUMBER .)
    ELSEIF          reduce using rule 23 (VAL_DECL -> VAL ID EQUALS NUMBER .)


state 41

    (24) VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .

    VAL             reduce using rule 24 (VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .)
    VAR             reduce using rule 24 (VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .)
    RBRACE          reduce using rule 24 (VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .)
    LBRACE          reduce using rule 24 (VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .)
    FOR             reduce using rule 24 (VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .)
    WHILE           reduce using rule 24 (VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .)
    IF              reduce using rule 24 (VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .)
    ELSE            reduce using rule 24 (VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .)
    ELSEIF          reduce using rule 24 (VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .)


state 42

    (25) VAL_DECL -> VAL ID EQUALS RDD_INIT .

    VAL             reduce using rule 25 (VAL_DECL -> VAL ID EQUALS RDD_INIT .)
    VAR             reduce using rule 25 (VAL_DECL -> VAL ID EQUALS RDD_INIT .)
    RBRACE          reduce using rule 25 (VAL_DECL -> VAL ID EQUALS RDD_INIT .)
    LBRACE          reduce using rule 25 (VAL_DECL -> VAL ID EQUALS RDD_INIT .)
    FOR             reduce using rule 25 (VAL_DECL -> VAL ID EQUALS RDD_INIT .)
    WHILE           reduce using rule 25 (VAL_DECL -> VAL ID EQUALS RDD_INIT .)
    IF              reduce using rule 25 (VAL_DECL -> VAL ID EQUALS RDD_INIT .)
    ELSE            reduce using rule 25 (VAL_DECL -> VAL ID EQUALS RDD_INIT .)
    ELSEIF          reduce using rule 25 (VAL_DECL -> VAL ID EQUALS RDD_INIT .)


state 43

    (17) ITERABLE -> ID IN . CONTAINER
    (18) CONTAINER -> . ID

    ID              shift and go to state 65

    CONTAINER                      shift and go to state 64

state 44

    (14) FOR_STMT -> FOR ITERABLE BLOCK_STMT .

    RBRACE          reduce using rule 14 (FOR_STMT -> FOR ITERABLE BLOCK_STMT .)
    LBRACE          reduce using rule 14 (FOR_STMT -> FOR ITERABLE BLOCK_STMT .)
    FOR             reduce using rule 14 (FOR_STMT -> FOR ITERABLE BLOCK_STMT .)
    WHILE           reduce using rule 14 (FOR_STMT -> FOR ITERABLE BLOCK_STMT .)
    IF              reduce using rule 14 (FOR_STMT -> FOR ITERABLE BLOCK_STMT .)
    ELSE            reduce using rule 14 (FOR_STMT -> FOR ITERABLE BLOCK_STMT .)
    ELSEIF          reduce using rule 14 (FOR_STMT -> FOR ITERABLE BLOCK_STMT .)


state 45

    (39) LOGIC_EXPR -> NUMBER AND . LOGIC_EXPR
    (31) LOGIC_EXPR -> . ID
    (32) LOGIC_EXPR -> . NUMBER
    (33) LOGIC_EXPR -> . NOT LOGIC_EXPR
    (34) LOGIC_EXPR -> . ID AND LOGIC_EXPR
    (35) LOGIC_EXPR -> . ID OR LOGIC_EXPR
    (36) LOGIC_EXPR -> . ID LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> . ID EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> . ID SMALLER LOGIC_EXPR
    (39) LOGIC_EXPR -> . NUMBER AND LOGIC_EXPR
    (40) LOGIC_EXPR -> . NUMBER OR LOGIC_EXPR
    (41) LOGIC_EXPR -> . NUMBER LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> . NUMBER EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> . NUMBER SMALLER LOGIC_EXPR

    ID              shift and go to state 33
    NUMBER          shift and go to state 30
    NOT             shift and go to state 31

    LOGIC_EXPR                     shift and go to state 66

state 46

    (43) LOGIC_EXPR -> NUMBER SMALLER . LOGIC_EXPR
    (31) LOGIC_EXPR -> . ID
    (32) LOGIC_EXPR -> . NUMBER
    (33) LOGIC_EXPR -> . NOT LOGIC_EXPR
    (34) LOGIC_EXPR -> . ID AND LOGIC_EXPR
    (35) LOGIC_EXPR -> . ID OR LOGIC_EXPR
    (36) LOGIC_EXPR -> . ID LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> . ID EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> . ID SMALLER LOGIC_EXPR
    (39) LOGIC_EXPR -> . NUMBER AND LOGIC_EXPR
    (40) LOGIC_EXPR -> . NUMBER OR LOGIC_EXPR
    (41) LOGIC_EXPR -> . NUMBER LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> . NUMBER EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> . NUMBER SMALLER LOGIC_EXPR

    ID              shift and go to state 33
    NUMBER          shift and go to state 30
    NOT             shift and go to state 31

    LOGIC_EXPR                     shift and go to state 67

state 47

    (41) LOGIC_EXPR -> NUMBER LARGER . LOGIC_EXPR
    (31) LOGIC_EXPR -> . ID
    (32) LOGIC_EXPR -> . NUMBER
    (33) LOGIC_EXPR -> . NOT LOGIC_EXPR
    (34) LOGIC_EXPR -> . ID AND LOGIC_EXPR
    (35) LOGIC_EXPR -> . ID OR LOGIC_EXPR
    (36) LOGIC_EXPR -> . ID LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> . ID EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> . ID SMALLER LOGIC_EXPR
    (39) LOGIC_EXPR -> . NUMBER AND LOGIC_EXPR
    (40) LOGIC_EXPR -> . NUMBER OR LOGIC_EXPR
    (41) LOGIC_EXPR -> . NUMBER LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> . NUMBER EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> . NUMBER SMALLER LOGIC_EXPR

    ID              shift and go to state 33
    NUMBER          shift and go to state 30
    NOT             shift and go to state 31

    LOGIC_EXPR                     shift and go to state 68

state 48

    (42) LOGIC_EXPR -> NUMBER EQUAL . LOGIC_EXPR
    (31) LOGIC_EXPR -> . ID
    (32) LOGIC_EXPR -> . NUMBER
    (33) LOGIC_EXPR -> . NOT LOGIC_EXPR
    (34) LOGIC_EXPR -> . ID AND LOGIC_EXPR
    (35) LOGIC_EXPR -> . ID OR LOGIC_EXPR
    (36) LOGIC_EXPR -> . ID LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> . ID EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> . ID SMALLER LOGIC_EXPR
    (39) LOGIC_EXPR -> . NUMBER AND LOGIC_EXPR
    (40) LOGIC_EXPR -> . NUMBER OR LOGIC_EXPR
    (41) LOGIC_EXPR -> . NUMBER LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> . NUMBER EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> . NUMBER SMALLER LOGIC_EXPR

    ID              shift and go to state 33
    NUMBER          shift and go to state 30
    NOT             shift and go to state 31

    LOGIC_EXPR                     shift and go to state 69

state 49

    (40) LOGIC_EXPR -> NUMBER OR . LOGIC_EXPR
    (31) LOGIC_EXPR -> . ID
    (32) LOGIC_EXPR -> . NUMBER
    (33) LOGIC_EXPR -> . NOT LOGIC_EXPR
    (34) LOGIC_EXPR -> . ID AND LOGIC_EXPR
    (35) LOGIC_EXPR -> . ID OR LOGIC_EXPR
    (36) LOGIC_EXPR -> . ID LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> . ID EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> . ID SMALLER LOGIC_EXPR
    (39) LOGIC_EXPR -> . NUMBER AND LOGIC_EXPR
    (40) LOGIC_EXPR -> . NUMBER OR LOGIC_EXPR
    (41) LOGIC_EXPR -> . NUMBER LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> . NUMBER EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> . NUMBER SMALLER LOGIC_EXPR

    ID              shift and go to state 33
    NUMBER          shift and go to state 30
    NOT             shift and go to state 31

    LOGIC_EXPR                     shift and go to state 70

state 50

    (33) LOGIC_EXPR -> NOT LOGIC_EXPR .

    LBRACE          reduce using rule 33 (LOGIC_EXPR -> NOT LOGIC_EXPR .)


state 51

    (11) IF_STMT -> IF LOGIC_EXPR BLOCK_STMT .

    RBRACE          reduce using rule 11 (IF_STMT -> IF LOGIC_EXPR BLOCK_STMT .)
    LBRACE          reduce using rule 11 (IF_STMT -> IF LOGIC_EXPR BLOCK_STMT .)
    FOR             reduce using rule 11 (IF_STMT -> IF LOGIC_EXPR BLOCK_STMT .)
    WHILE           reduce using rule 11 (IF_STMT -> IF LOGIC_EXPR BLOCK_STMT .)
    IF              reduce using rule 11 (IF_STMT -> IF LOGIC_EXPR BLOCK_STMT .)
    ELSE            reduce using rule 11 (IF_STMT -> IF LOGIC_EXPR BLOCK_STMT .)
    ELSEIF          reduce using rule 11 (IF_STMT -> IF LOGIC_EXPR BLOCK_STMT .)


state 52

    (34) LOGIC_EXPR -> ID AND . LOGIC_EXPR
    (31) LOGIC_EXPR -> . ID
    (32) LOGIC_EXPR -> . NUMBER
    (33) LOGIC_EXPR -> . NOT LOGIC_EXPR
    (34) LOGIC_EXPR -> . ID AND LOGIC_EXPR
    (35) LOGIC_EXPR -> . ID OR LOGIC_EXPR
    (36) LOGIC_EXPR -> . ID LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> . ID EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> . ID SMALLER LOGIC_EXPR
    (39) LOGIC_EXPR -> . NUMBER AND LOGIC_EXPR
    (40) LOGIC_EXPR -> . NUMBER OR LOGIC_EXPR
    (41) LOGIC_EXPR -> . NUMBER LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> . NUMBER EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> . NUMBER SMALLER LOGIC_EXPR

    ID              shift and go to state 33
    NUMBER          shift and go to state 30
    NOT             shift and go to state 31

    LOGIC_EXPR                     shift and go to state 71

state 53

    (38) LOGIC_EXPR -> ID SMALLER . LOGIC_EXPR
    (31) LOGIC_EXPR -> . ID
    (32) LOGIC_EXPR -> . NUMBER
    (33) LOGIC_EXPR -> . NOT LOGIC_EXPR
    (34) LOGIC_EXPR -> . ID AND LOGIC_EXPR
    (35) LOGIC_EXPR -> . ID OR LOGIC_EXPR
    (36) LOGIC_EXPR -> . ID LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> . ID EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> . ID SMALLER LOGIC_EXPR
    (39) LOGIC_EXPR -> . NUMBER AND LOGIC_EXPR
    (40) LOGIC_EXPR -> . NUMBER OR LOGIC_EXPR
    (41) LOGIC_EXPR -> . NUMBER LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> . NUMBER EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> . NUMBER SMALLER LOGIC_EXPR

    ID              shift and go to state 33
    NUMBER          shift and go to state 30
    NOT             shift and go to state 31

    LOGIC_EXPR                     shift and go to state 72

state 54

    (36) LOGIC_EXPR -> ID LARGER . LOGIC_EXPR
    (31) LOGIC_EXPR -> . ID
    (32) LOGIC_EXPR -> . NUMBER
    (33) LOGIC_EXPR -> . NOT LOGIC_EXPR
    (34) LOGIC_EXPR -> . ID AND LOGIC_EXPR
    (35) LOGIC_EXPR -> . ID OR LOGIC_EXPR
    (36) LOGIC_EXPR -> . ID LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> . ID EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> . ID SMALLER LOGIC_EXPR
    (39) LOGIC_EXPR -> . NUMBER AND LOGIC_EXPR
    (40) LOGIC_EXPR -> . NUMBER OR LOGIC_EXPR
    (41) LOGIC_EXPR -> . NUMBER LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> . NUMBER EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> . NUMBER SMALLER LOGIC_EXPR

    ID              shift and go to state 33
    NUMBER          shift and go to state 30
    NOT             shift and go to state 31

    LOGIC_EXPR                     shift and go to state 73

state 55

    (37) LOGIC_EXPR -> ID EQUAL . LOGIC_EXPR
    (31) LOGIC_EXPR -> . ID
    (32) LOGIC_EXPR -> . NUMBER
    (33) LOGIC_EXPR -> . NOT LOGIC_EXPR
    (34) LOGIC_EXPR -> . ID AND LOGIC_EXPR
    (35) LOGIC_EXPR -> . ID OR LOGIC_EXPR
    (36) LOGIC_EXPR -> . ID LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> . ID EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> . ID SMALLER LOGIC_EXPR
    (39) LOGIC_EXPR -> . NUMBER AND LOGIC_EXPR
    (40) LOGIC_EXPR -> . NUMBER OR LOGIC_EXPR
    (41) LOGIC_EXPR -> . NUMBER LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> . NUMBER EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> . NUMBER SMALLER LOGIC_EXPR

    ID              shift and go to state 33
    NUMBER          shift and go to state 30
    NOT             shift and go to state 31

    LOGIC_EXPR                     shift and go to state 74

state 56

    (35) LOGIC_EXPR -> ID OR . LOGIC_EXPR
    (31) LOGIC_EXPR -> . ID
    (32) LOGIC_EXPR -> . NUMBER
    (33) LOGIC_EXPR -> . NOT LOGIC_EXPR
    (34) LOGIC_EXPR -> . ID AND LOGIC_EXPR
    (35) LOGIC_EXPR -> . ID OR LOGIC_EXPR
    (36) LOGIC_EXPR -> . ID LARGER LOGIC_EXPR
    (37) LOGIC_EXPR -> . ID EQUAL LOGIC_EXPR
    (38) LOGIC_EXPR -> . ID SMALLER LOGIC_EXPR
    (39) LOGIC_EXPR -> . NUMBER AND LOGIC_EXPR
    (40) LOGIC_EXPR -> . NUMBER OR LOGIC_EXPR
    (41) LOGIC_EXPR -> . NUMBER LARGER LOGIC_EXPR
    (42) LOGIC_EXPR -> . NUMBER EQUAL LOGIC_EXPR
    (43) LOGIC_EXPR -> . NUMBER SMALLER LOGIC_EXPR

    ID              shift and go to state 33
    NUMBER          shift and go to state 30
    NOT             shift and go to state 31

    LOGIC_EXPR                     shift and go to state 75

state 57

    (13) ELSE_IF_STMT -> ELSEIF LOGIC_EXPR BLOCK_STMT .

    RBRACE          reduce using rule 13 (ELSE_IF_STMT -> ELSEIF LOGIC_EXPR BLOCK_STMT .)
    LBRACE          reduce using rule 13 (ELSE_IF_STMT -> ELSEIF LOGIC_EXPR BLOCK_STMT .)
    FOR             reduce using rule 13 (ELSE_IF_STMT -> ELSEIF LOGIC_EXPR BLOCK_STMT .)
    WHILE           reduce using rule 13 (ELSE_IF_STMT -> ELSEIF LOGIC_EXPR BLOCK_STMT .)
    IF              reduce using rule 13 (ELSE_IF_STMT -> ELSEIF LOGIC_EXPR BLOCK_STMT .)
    ELSE            reduce using rule 13 (ELSE_IF_STMT -> ELSEIF LOGIC_EXPR BLOCK_STMT .)
    ELSEIF          reduce using rule 13 (ELSE_IF_STMT -> ELSEIF LOGIC_EXPR BLOCK_STMT .)


state 58

    (15) WHILE_STMT -> WHILE LOGIC_EXPR BLOCK_STMT .

    RBRACE          reduce using rule 15 (WHILE_STMT -> WHILE LOGIC_EXPR BLOCK_STMT .)
    LBRACE          reduce using rule 15 (WHILE_STMT -> WHILE LOGIC_EXPR BLOCK_STMT .)
    FOR             reduce using rule 15 (WHILE_STMT -> WHILE LOGIC_EXPR BLOCK_STMT .)
    WHILE           reduce using rule 15 (WHILE_STMT -> WHILE LOGIC_EXPR BLOCK_STMT .)
    IF              reduce using rule 15 (WHILE_STMT -> WHILE LOGIC_EXPR BLOCK_STMT .)
    ELSE            reduce using rule 15 (WHILE_STMT -> WHILE LOGIC_EXPR BLOCK_STMT .)
    ELSEIF          reduce using rule 15 (WHILE_STMT -> WHILE LOGIC_EXPR BLOCK_STMT .)


state 59

    (26) VAR_DECL -> VAR ID EQUALS NUMBER .

    VAL             reduce using rule 26 (VAR_DECL -> VAR ID EQUALS NUMBER .)
    VAR             reduce using rule 26 (VAR_DECL -> VAR ID EQUALS NUMBER .)
    RBRACE          reduce using rule 26 (VAR_DECL -> VAR ID EQUALS NUMBER .)
    LBRACE          reduce using rule 26 (VAR_DECL -> VAR ID EQUALS NUMBER .)
    FOR             reduce using rule 26 (VAR_DECL -> VAR ID EQUALS NUMBER .)
    WHILE           reduce using rule 26 (VAR_DECL -> VAR ID EQUALS NUMBER .)
    IF              reduce using rule 26 (VAR_DECL -> VAR ID EQUALS NUMBER .)
    ELSE            reduce using rule 26 (VAR_DECL -> VAR ID EQUALS NUMBER .)
    ELSEIF          reduce using rule 26 (VAR_DECL -> VAR ID EQUALS NUMBER .)


state 60

    (27) VAR_DECL -> VAR ID EQUALS USER_DEFINE_VALUE .

    VAL             reduce using rule 27 (VAR_DECL -> VAR ID EQUALS USER_DEFINE_VALUE .)
    VAR             reduce using rule 27 (VAR_DECL -> VAR ID EQUALS USER_DEFINE_VALUE .)
    RBRACE          reduce using rule 27 (VAR_DECL -> VAR ID EQUALS USER_DEFINE_VALUE .)
    LBRACE          reduce using rule 27 (VAR_DECL -> VAR ID EQUALS USER_DEFINE_VALUE .)
    FOR             reduce using rule 27 (VAR_DECL -> VAR ID EQUALS USER_DEFINE_VALUE .)
    WHILE           reduce using rule 27 (VAR_DECL -> VAR ID EQUALS USER_DEFINE_VALUE .)
    IF              reduce using rule 27 (VAR_DECL -> VAR ID EQUALS USER_DEFINE_VALUE .)
    ELSE            reduce using rule 27 (VAR_DECL -> VAR ID EQUALS USER_DEFINE_VALUE .)
    ELSEIF          reduce using rule 27 (VAR_DECL -> VAR ID EQUALS USER_DEFINE_VALUE .)


state 61

    (28) VAR_DECL -> VAR ID EQUALS RDD_INIT .

    VAL             reduce using rule 28 (VAR_DECL -> VAR ID EQUALS RDD_INIT .)
    VAR             reduce using rule 28 (VAR_DECL -> VAR ID EQUALS RDD_INIT .)
    RBRACE          reduce using rule 28 (VAR_DECL -> VAR ID EQUALS RDD_INIT .)
    LBRACE          reduce using rule 28 (VAR_DECL -> VAR ID EQUALS RDD_INIT .)
    FOR             reduce using rule 28 (VAR_DECL -> VAR ID EQUALS RDD_INIT .)
    WHILE           reduce using rule 28 (VAR_DECL -> VAR ID EQUALS RDD_INIT .)
    IF              reduce using rule 28 (VAR_DECL -> VAR ID EQUALS RDD_INIT .)
    ELSE            reduce using rule 28 (VAR_DECL -> VAR ID EQUALS RDD_INIT .)
    ELSEIF          reduce using rule 28 (VAR_DECL -> VAR ID EQUALS RDD_INIT .)


state 62

    (30) RDD_INIT -> TEXT_FILE LPAREN . STRING RPAREN

    STRING          shift and go to state 76


state 63

    (29) USER_DEFINE_VALUE -> USER_DEFINE STRING .

    VAL             reduce using rule 29 (USER_DEFINE_VALUE -> USER_DEFINE STRING .)
    VAR             reduce using rule 29 (USER_DEFINE_VALUE -> USER_DEFINE STRING .)
    RBRACE          reduce using rule 29 (USER_DEFINE_VALUE -> USER_DEFINE STRING .)
    LBRACE          reduce using rule 29 (USER_DEFINE_VALUE -> USER_DEFINE STRING .)
    FOR             reduce using rule 29 (USER_DEFINE_VALUE -> USER_DEFINE STRING .)
    WHILE           reduce using rule 29 (USER_DEFINE_VALUE -> USER_DEFINE STRING .)
    IF              reduce using rule 29 (USER_DEFINE_VALUE -> USER_DEFINE STRING .)
    ELSE            reduce using rule 29 (USER_DEFINE_VALUE -> USER_DEFINE STRING .)
    ELSEIF          reduce using rule 29 (USER_DEFINE_VALUE -> USER_DEFINE STRING .)


state 64

    (17) ITERABLE -> ID IN CONTAINER .

    LBRACE          reduce using rule 17 (ITERABLE -> ID IN CONTAINER .)


state 65

    (18) CONTAINER -> ID .

    LBRACE          reduce using rule 18 (CONTAINER -> ID .)


state 66

    (39) LOGIC_EXPR -> NUMBER AND LOGIC_EXPR .

    LBRACE          reduce using rule 39 (LOGIC_EXPR -> NUMBER AND LOGIC_EXPR .)


state 67

    (43) LOGIC_EXPR -> NUMBER SMALLER LOGIC_EXPR .

    LBRACE          reduce using rule 43 (LOGIC_EXPR -> NUMBER SMALLER LOGIC_EXPR .)


state 68

    (41) LOGIC_EXPR -> NUMBER LARGER LOGIC_EXPR .

    LBRACE          reduce using rule 41 (LOGIC_EXPR -> NUMBER LARGER LOGIC_EXPR .)


state 69

    (42) LOGIC_EXPR -> NUMBER EQUAL LOGIC_EXPR .

    LBRACE          reduce using rule 42 (LOGIC_EXPR -> NUMBER EQUAL LOGIC_EXPR .)


state 70

    (40) LOGIC_EXPR -> NUMBER OR LOGIC_EXPR .

    LBRACE          reduce using rule 40 (LOGIC_EXPR -> NUMBER OR LOGIC_EXPR .)


state 71

    (34) LOGIC_EXPR -> ID AND LOGIC_EXPR .

    LBRACE          reduce using rule 34 (LOGIC_EXPR -> ID AND LOGIC_EXPR .)


state 72

    (38) LOGIC_EXPR -> ID SMALLER LOGIC_EXPR .

    LBRACE          reduce using rule 38 (LOGIC_EXPR -> ID SMALLER LOGIC_EXPR .)


state 73

    (36) LOGIC_EXPR -> ID LARGER LOGIC_EXPR .

    LBRACE          reduce using rule 36 (LOGIC_EXPR -> ID LARGER LOGIC_EXPR .)


state 74

    (37) LOGIC_EXPR -> ID EQUAL LOGIC_EXPR .

    LBRACE          reduce using rule 37 (LOGIC_EXPR -> ID EQUAL LOGIC_EXPR .)


state 75

    (35) LOGIC_EXPR -> ID OR LOGIC_EXPR .

    LBRACE          reduce using rule 35 (LOGIC_EXPR -> ID OR LOGIC_EXPR .)


state 76

    (30) RDD_INIT -> TEXT_FILE LPAREN STRING . RPAREN

    RPAREN          shift and go to state 77


state 77

    (30) RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .

    VAL             reduce using rule 30 (RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .)
    VAR             reduce using rule 30 (RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .)
    RBRACE          reduce using rule 30 (RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .)
    LBRACE          reduce using rule 30 (RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .)
    FOR             reduce using rule 30 (RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .)
    WHILE           reduce using rule 30 (RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .)
    IF              reduce using rule 30 (RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .)
    ELSE            reduce using rule 30 (RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .)
    ELSEIF          reduce using rule 30 (RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .)

