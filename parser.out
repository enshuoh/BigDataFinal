Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    THEN
    OBJECT
    WHILE
    NEW
    MINUS
    DOT
    TO
    PLUS
    SEQUENCE_FILE
    DIVIDE
    TIMES
    ELSE
    IF

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> BLOCK_STMT
Rule 2     BLOCK_STMT -> LBRACE enter_scope VAL_DECL_INIT STMT_INIT exit_scope RBRACE
Rule 3     STMT_INIT -> STMT_INIT STMT
Rule 4     STMT_INIT -> <empty>
Rule 5     STMT -> BLOCK_STMT
Rule 6     STMT -> FOR_STMT
Rule 7     FOR_STMT -> FOR ITERABLE BLOCK_STMT
Rule 8     enter_scope -> <empty>
Rule 9     exit_scope -> <empty>
Rule 10    ITERABLE -> ID IN CONTAINER
Rule 11    CONTAINER -> ID
Rule 12    VAL_DECL_INIT -> VAL_DECL_INIT VAL_DECL
Rule 13    VAL_DECL_INIT -> <empty>
Rule 14    VAL_DECL -> VAL ID EQUALS NUMBER
Rule 15    VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE
Rule 16    VAL_DECL -> VAL ID EQUALS RDD_INIT
Rule 17    USER_DEFINE_VALUE -> USER_DEFINE STRING
Rule 18    RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN

Terminals, with rules where they appear

DIVIDE               : 
DOT                  : 
ELSE                 : 
EQUALS               : 14 15 16
FOR                  : 7
ID                   : 10 11 14 15 16
IF                   : 
IN                   : 10
LBRACE               : 2
LPAREN               : 18
MINUS                : 
NEW                  : 
NUMBER               : 14
OBJECT               : 
PLUS                 : 
RBRACE               : 2
RPAREN               : 18
SEQUENCE_FILE        : 
STRING               : 17 18
TEXT_FILE            : 18
THEN                 : 
TIMES                : 
TO                   : 
USER_DEFINE          : 17
VAL                  : 14 15 16
WHILE                : 
error                : 

Nonterminals, with rules where they appear

BLOCK_STMT           : 1 5 7
CONTAINER            : 10
FOR_STMT             : 6
ITERABLE             : 7
PROGRAM              : 0
RDD_INIT             : 16
STMT                 : 3
STMT_INIT            : 2 3
USER_DEFINE_VALUE    : 15
VAL_DECL             : 12
VAL_DECL_INIT        : 2 12
enter_scope          : 2
exit_scope           : 2

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . BLOCK_STMT
    (2) BLOCK_STMT -> . LBRACE enter_scope VAL_DECL_INIT STMT_INIT exit_scope RBRACE

    LBRACE          shift and go to state 1

    BLOCK_STMT                     shift and go to state 2
    PROGRAM                        shift and go to state 3

state 1

    (2) BLOCK_STMT -> LBRACE . enter_scope VAL_DECL_INIT STMT_INIT exit_scope RBRACE
    (8) enter_scope -> .

    VAL             reduce using rule 8 (enter_scope -> .)
    LBRACE          reduce using rule 8 (enter_scope -> .)
    FOR             reduce using rule 8 (enter_scope -> .)
    RBRACE          reduce using rule 8 (enter_scope -> .)

    enter_scope                    shift and go to state 4

state 2

    (1) PROGRAM -> BLOCK_STMT .

    $end            reduce using rule 1 (PROGRAM -> BLOCK_STMT .)


state 3

    (0) S' -> PROGRAM .



state 4

    (2) BLOCK_STMT -> LBRACE enter_scope . VAL_DECL_INIT STMT_INIT exit_scope RBRACE
    (12) VAL_DECL_INIT -> . VAL_DECL_INIT VAL_DECL
    (13) VAL_DECL_INIT -> .

    VAL             reduce using rule 13 (VAL_DECL_INIT -> .)
    LBRACE          reduce using rule 13 (VAL_DECL_INIT -> .)
    FOR             reduce using rule 13 (VAL_DECL_INIT -> .)
    RBRACE          reduce using rule 13 (VAL_DECL_INIT -> .)

    VAL_DECL_INIT                  shift and go to state 5

state 5

    (2) BLOCK_STMT -> LBRACE enter_scope VAL_DECL_INIT . STMT_INIT exit_scope RBRACE
    (12) VAL_DECL_INIT -> VAL_DECL_INIT . VAL_DECL
    (3) STMT_INIT -> . STMT_INIT STMT
    (4) STMT_INIT -> .
    (14) VAL_DECL -> . VAL ID EQUALS NUMBER
    (15) VAL_DECL -> . VAL ID EQUALS USER_DEFINE_VALUE
    (16) VAL_DECL -> . VAL ID EQUALS RDD_INIT

    LBRACE          reduce using rule 4 (STMT_INIT -> .)
    FOR             reduce using rule 4 (STMT_INIT -> .)
    RBRACE          reduce using rule 4 (STMT_INIT -> .)
    VAL             shift and go to state 6

    STMT_INIT                      shift and go to state 7
    VAL_DECL                       shift and go to state 8

state 6

    (14) VAL_DECL -> VAL . ID EQUALS NUMBER
    (15) VAL_DECL -> VAL . ID EQUALS USER_DEFINE_VALUE
    (16) VAL_DECL -> VAL . ID EQUALS RDD_INIT

    ID              shift and go to state 9


state 7

    (2) BLOCK_STMT -> LBRACE enter_scope VAL_DECL_INIT STMT_INIT . exit_scope RBRACE
    (3) STMT_INIT -> STMT_INIT . STMT
    (9) exit_scope -> .
    (5) STMT -> . BLOCK_STMT
    (6) STMT -> . FOR_STMT
    (2) BLOCK_STMT -> . LBRACE enter_scope VAL_DECL_INIT STMT_INIT exit_scope RBRACE
    (7) FOR_STMT -> . FOR ITERABLE BLOCK_STMT

    RBRACE          reduce using rule 9 (exit_scope -> .)
    LBRACE          shift and go to state 1
    FOR             shift and go to state 10

    BLOCK_STMT                     shift and go to state 13
    FOR_STMT                       shift and go to state 12
    STMT                           shift and go to state 11
    exit_scope                     shift and go to state 14

state 8

    (12) VAL_DECL_INIT -> VAL_DECL_INIT VAL_DECL .

    VAL             reduce using rule 12 (VAL_DECL_INIT -> VAL_DECL_INIT VAL_DECL .)
    LBRACE          reduce using rule 12 (VAL_DECL_INIT -> VAL_DECL_INIT VAL_DECL .)
    FOR             reduce using rule 12 (VAL_DECL_INIT -> VAL_DECL_INIT VAL_DECL .)
    RBRACE          reduce using rule 12 (VAL_DECL_INIT -> VAL_DECL_INIT VAL_DECL .)


state 9

    (14) VAL_DECL -> VAL ID . EQUALS NUMBER
    (15) VAL_DECL -> VAL ID . EQUALS USER_DEFINE_VALUE
    (16) VAL_DECL -> VAL ID . EQUALS RDD_INIT

    EQUALS          shift and go to state 15


state 10

    (7) FOR_STMT -> FOR . ITERABLE BLOCK_STMT
    (10) ITERABLE -> . ID IN CONTAINER

    ID              shift and go to state 16

    ITERABLE                       shift and go to state 17

state 11

    (3) STMT_INIT -> STMT_INIT STMT .

    LBRACE          reduce using rule 3 (STMT_INIT -> STMT_INIT STMT .)
    FOR             reduce using rule 3 (STMT_INIT -> STMT_INIT STMT .)
    RBRACE          reduce using rule 3 (STMT_INIT -> STMT_INIT STMT .)


state 12

    (6) STMT -> FOR_STMT .

    LBRACE          reduce using rule 6 (STMT -> FOR_STMT .)
    FOR             reduce using rule 6 (STMT -> FOR_STMT .)
    RBRACE          reduce using rule 6 (STMT -> FOR_STMT .)


state 13

    (5) STMT -> BLOCK_STMT .

    LBRACE          reduce using rule 5 (STMT -> BLOCK_STMT .)
    FOR             reduce using rule 5 (STMT -> BLOCK_STMT .)
    RBRACE          reduce using rule 5 (STMT -> BLOCK_STMT .)


state 14

    (2) BLOCK_STMT -> LBRACE enter_scope VAL_DECL_INIT STMT_INIT exit_scope . RBRACE

    RBRACE          shift and go to state 18


state 15

    (14) VAL_DECL -> VAL ID EQUALS . NUMBER
    (15) VAL_DECL -> VAL ID EQUALS . USER_DEFINE_VALUE
    (16) VAL_DECL -> VAL ID EQUALS . RDD_INIT
    (17) USER_DEFINE_VALUE -> . USER_DEFINE STRING
    (18) RDD_INIT -> . TEXT_FILE LPAREN STRING RPAREN

    NUMBER          shift and go to state 21
    USER_DEFINE     shift and go to state 20
    TEXT_FILE       shift and go to state 19

    USER_DEFINE_VALUE              shift and go to state 22
    RDD_INIT                       shift and go to state 23

state 16

    (10) ITERABLE -> ID . IN CONTAINER

    IN              shift and go to state 24


state 17

    (7) FOR_STMT -> FOR ITERABLE . BLOCK_STMT
    (2) BLOCK_STMT -> . LBRACE enter_scope VAL_DECL_INIT STMT_INIT exit_scope RBRACE

    LBRACE          shift and go to state 1

    BLOCK_STMT                     shift and go to state 25

state 18

    (2) BLOCK_STMT -> LBRACE enter_scope VAL_DECL_INIT STMT_INIT exit_scope RBRACE .

    $end            reduce using rule 2 (BLOCK_STMT -> LBRACE enter_scope VAL_DECL_INIT STMT_INIT exit_scope RBRACE .)
    LBRACE          reduce using rule 2 (BLOCK_STMT -> LBRACE enter_scope VAL_DECL_INIT STMT_INIT exit_scope RBRACE .)
    FOR             reduce using rule 2 (BLOCK_STMT -> LBRACE enter_scope VAL_DECL_INIT STMT_INIT exit_scope RBRACE .)
    RBRACE          reduce using rule 2 (BLOCK_STMT -> LBRACE enter_scope VAL_DECL_INIT STMT_INIT exit_scope RBRACE .)


state 19

    (18) RDD_INIT -> TEXT_FILE . LPAREN STRING RPAREN

    LPAREN          shift and go to state 26


state 20

    (17) USER_DEFINE_VALUE -> USER_DEFINE . STRING

    STRING          shift and go to state 27


state 21

    (14) VAL_DECL -> VAL ID EQUALS NUMBER .

    VAL             reduce using rule 14 (VAL_DECL -> VAL ID EQUALS NUMBER .)
    LBRACE          reduce using rule 14 (VAL_DECL -> VAL ID EQUALS NUMBER .)
    FOR             reduce using rule 14 (VAL_DECL -> VAL ID EQUALS NUMBER .)
    RBRACE          reduce using rule 14 (VAL_DECL -> VAL ID EQUALS NUMBER .)


state 22

    (15) VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .

    VAL             reduce using rule 15 (VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .)
    LBRACE          reduce using rule 15 (VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .)
    FOR             reduce using rule 15 (VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .)
    RBRACE          reduce using rule 15 (VAL_DECL -> VAL ID EQUALS USER_DEFINE_VALUE .)


state 23

    (16) VAL_DECL -> VAL ID EQUALS RDD_INIT .

    VAL             reduce using rule 16 (VAL_DECL -> VAL ID EQUALS RDD_INIT .)
    LBRACE          reduce using rule 16 (VAL_DECL -> VAL ID EQUALS RDD_INIT .)
    FOR             reduce using rule 16 (VAL_DECL -> VAL ID EQUALS RDD_INIT .)
    RBRACE          reduce using rule 16 (VAL_DECL -> VAL ID EQUALS RDD_INIT .)


state 24

    (10) ITERABLE -> ID IN . CONTAINER
    (11) CONTAINER -> . ID

    ID              shift and go to state 29

    CONTAINER                      shift and go to state 28

state 25

    (7) FOR_STMT -> FOR ITERABLE BLOCK_STMT .

    LBRACE          reduce using rule 7 (FOR_STMT -> FOR ITERABLE BLOCK_STMT .)
    FOR             reduce using rule 7 (FOR_STMT -> FOR ITERABLE BLOCK_STMT .)
    RBRACE          reduce using rule 7 (FOR_STMT -> FOR ITERABLE BLOCK_STMT .)


state 26

    (18) RDD_INIT -> TEXT_FILE LPAREN . STRING RPAREN

    STRING          shift and go to state 30


state 27

    (17) USER_DEFINE_VALUE -> USER_DEFINE STRING .

    VAL             reduce using rule 17 (USER_DEFINE_VALUE -> USER_DEFINE STRING .)
    LBRACE          reduce using rule 17 (USER_DEFINE_VALUE -> USER_DEFINE STRING .)
    FOR             reduce using rule 17 (USER_DEFINE_VALUE -> USER_DEFINE STRING .)
    RBRACE          reduce using rule 17 (USER_DEFINE_VALUE -> USER_DEFINE STRING .)


state 28

    (10) ITERABLE -> ID IN CONTAINER .

    LBRACE          reduce using rule 10 (ITERABLE -> ID IN CONTAINER .)


state 29

    (11) CONTAINER -> ID .

    LBRACE          reduce using rule 11 (CONTAINER -> ID .)


state 30

    (18) RDD_INIT -> TEXT_FILE LPAREN STRING . RPAREN

    RPAREN          shift and go to state 31


state 31

    (18) RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .

    VAL             reduce using rule 18 (RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .)
    LBRACE          reduce using rule 18 (RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .)
    FOR             reduce using rule 18 (RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .)
    RBRACE          reduce using rule 18 (RDD_INIT -> TEXT_FILE LPAREN STRING RPAREN .)

